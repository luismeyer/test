name: Release Please
on:
  push:
    branches:
      - main

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          package-name: TEST
          pull-request-title-pattern: "v${version}"

  release-stack:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created }}
    env:
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "npm"
          registry-url: https://npm.pkg.github.com
          scope: "@volkswagen-onehub"

      - name: Update Release description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request, repository } = context.payload;
            const ref = '${{ needs.release-please.outputs.tag_name }}'

            const version = ref.replace('refs/tags/', '').replace(/\./g, '-');
            const newStackLabel = `${ version }.test.com`;
            const newStackLink = `[${ newStackLabel }](https://${ newStackLabel })`;

            const { data: { id, body } } = await github.rest.repos.getReleaseByTag({owner: repository.owner.login, repo: repository.name, tag: ref});

            const newBody = `${ newStackLink }\n---\n${ body }`;
            await github.rest.repos.updateRelease({owner: repository.owner.login, repo: repository.name, release_id: id, body: newBody});
