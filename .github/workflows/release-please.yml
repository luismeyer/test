name: Release Please
on:
  push:
    branches:
      - main

jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      releaseCreated: ${{ steps.release-created.outputs.releases_created }}
      tagName: ${{ steps.release-please.outputs.tag_name }}

    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release-please
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          package-name: TEST
          pull-request-title-pattern: "v${version}"

  setup:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: release-please
    outputs:
      ref: ${{ steps.ref.outputs.result }}
      stackLink: ${{ steps.stackLink.outputs.result }}
      releasePRNumber: ${{ steps.envVars.outputs.releasePRNumber }}
      releasePRHeadSha: ${{ steps.envVars.outputs.releasePRHeadSha }}
    env:
      CI: true

    steps:
      - name: Find Ref
        id: ref
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          result-encoding: string
          script: |
            const releaseCreated = Boolean(${{ needs.release-please.outputs.releaseCreated }});
            const tagName = '${{ needs.release-please.outputs.tagName }}';
            const releasePRName = 'release-please--branches--main--components--TEST';

            return releaseCreated ? tagName : releasePRName;

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.ref.outputs.result }}

      - name: Create Env Variables
        id: envVars
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "releasePRNumber=$(gh pr view --json number -q .number || echo "PR number not found")" >> $GITHUB_ENV
          echo "releasePRHeadSha=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Create Stacklink
        uses: actions/github-script@v6
        id: stackLink
        env:
          AWS_HOSTED_ZONE_NAME: ${{ secrets.AWS_HOSTED_ZONE_NAME }}
        with:
          github-token: ${{ github.token }}
          script: |
            let version = '${{ env.releasePRHeadSha }}'.slice(0, 8);
            const releaseCreated = Boolean(${{ needs.release-please.outputs.releaseCreated }});

            if (releaseCreated) {
              const ref = '${{ needs.release-please.outputs.tagName }}'
              version = ref.replace('refs/tags/', '').replace(/\./g, '-');
            }

            const newStackLabel = `${ version }.${{ env.AWS_HOSTED_ZONE_NAME }}`;
            return `[${ newStackLabel }](https://${ newStackLabel })`;

  deploy:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [release-please, setup]
    env:
      CI: true

    steps:
      - name: Info
        run: echo '${{ needs.setup.outputs.ref }}'

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "npm"
          registry-url: https://npm.pkg.github.com
          scope: "@volkswagen-onehub"

  release-output:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [release-please, setup, deploy]
    if: ${{ needs.release-please.outputs.releaseCreated }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Update Release description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request, repository } = context.payload;
            const newStackLink = '${{ needs.setup.outputs.stackLink }}'

            const { data: { id, body } } = await github.rest.repos.getReleaseByTag({ 
              owner: repository.owner.login, 
              repo: repository.name, 
              tag: '${{ needs.release-please.outputs.tagName }}'
            });

            await github.rest.repos.updateRelease({
              owner: repository.owner.login, 
              repo: repository.name, 
              release_id: id, 
              body: `${ newStackLink }\n---\n${ body }`
            });

  prerelease-output:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [release-please, setup, deploy]
    if: ${{ !needs.release-please.outputs.releaseCreated }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Update PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const { repository } = context.payload;

            const newStackLink = '${{ needs.setup.outputs.stackLink }}';
            const pullNumber = ${{ needs.setup.outputs.releasePRNumber }}

            await github.rest.issues.createComment({ 
              owner: repository.owner.login, 
              repo: repository.name, 
              issue_number: pullNumber, 
              body: `Deployed to ${ newStackLink }`
            });

            let { data: { body } } = await github.rest.pulls.get({ 
              owner: repository.owner.login,
              repo: repository.name, 
              pull_number: pullNumber
            });

            if (!body) {
              console.info('No body found');
              return
            }

            if (body.includes(newStackLink)) {
              console.info('Stack link already present');
              return
            }

            const prefix = 'Current Prerelease: ';

            if (body.includes(prefix)) {
              console.info('Cutting first line of body...');

              const firstLineBreakIndex = body.indexOf('\n');
              body = body.substring(body.indexOf('\n', firstLineBreakIndex + 1) + 1);
            }

            body = `${ prefix }${ newStackLink }\n---\n${ body }`;

            await github.rest.pulls.update({ 
              owner: repository.owner.login, 
              repo: repository.name, 
              pull_number: pullNumber, 
              body
            });
