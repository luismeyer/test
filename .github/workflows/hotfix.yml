name: Deploy Hotfix
on:
  release:
    types: [published]

jobs:
  checkReleaseName:
    runs-on: ubuntu-latest
    outputs:
      isHotfix: ${{ steps.check.outputs.result }}
    env:
      CI: true

    steps:
      - name: Check name of release
        uses: actions/github-script@v6
        id: check
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pattern = /v\d*\.\d*\.\d*-fix\.\d*/;
            const releaseName = '${{ github.event.release.name }}';

            return pattern.test(releaseName);

  deploy:
    runs-on: ubuntu-latest
    needs: [checkReleaseName]
    if: ${{ needs.checkReleaseName.outputs.isHotfix }}
    env:
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "npm"
          registry-url: https://npm.pkg.github.com
          scope: "@volkswagen-onehub"

      - name: Install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm ci --fund false --audit false --loglevel error

      - name: Build
        env:
          ONEHUB_USERNAME: ${{ secrets.ONEHUB_USERNAME }}
          ONEHUB_PASSWORD: ${{ secrets.ONEHUB_PASSWORD }}
          MOCK_SERVICE_USERNAME: ${{ secrets.MOCK_SERVICE_USERNAME }}
          MOCK_SERVICE_PASSWORD: ${{ secrets.MOCK_SERVICE_PASSWORD }}
        run: npm run build

      - name: Release
        env:
          ONEHUB_USERNAME: ${{ secrets.ONEHUB_USERNAME }}
          ONEHUB_PASSWORD: ${{ secrets.ONEHUB_PASSWORD }}
          MOCK_SERVICE_USERNAME: ${{ secrets.MOCK_SERVICE_USERNAME }}
          MOCK_SERVICE_PASSWORD: ${{ secrets.MOCK_SERVICE_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          RELEASE: true
        run: npm run deploy
